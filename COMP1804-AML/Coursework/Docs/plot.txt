def plot_category_distributions(original_counts, resampled_counts):
    fig, ax = plt.subplots(2, 2, figsize=(14, 10))

    # Displaying the imbalanced category distribution
    print("\nImbalanced Category Distribution:\n")
    print("-"*55)
    print("Imbalanced Category Distribution:")
    print(original_counts)
    print("-"*55)

    # Displaying the balanced category distribution
    print("\nBalanced Category Distribution:\n")
    print("-"*55)
    print("Balanced Category Distribution:")
    print(resampled_counts)
    print("-"*55)
    
    # Pie chart before resampling
    ax[0, 0].pie(original_counts.values, labels=original_counts.index, autopct='%1.1f%%')
    ax[0, 0].set_title('Original Category Distribution (Pie Chart)')
    
    # Pie chart after resampling
    ax[0, 1].pie(resampled_counts.values, labels=resampled_counts.index, autopct='%1.1f%%')
    ax[0, 1].set_title('Resampled Category Distribution (Pie Chart)')
    
    # Bar chart before resampling
    ax[1, 0].bar(range(len(original_counts)), original_counts.values, tick_label=original_counts.index)
    ax[1, 0].set_title('Original Category Distribution (Bar Chart)')
    ax[1, 0].tick_params(axis='x', rotation=45)
    
    # Bar chart after resampling
    ax[1, 1].bar(range(len(resampled_counts)), resampled_counts.values, tick_label=resampled_counts.index)
    ax[1, 1].set_title('Resampled Category Distribution (Bar Chart)')
    ax[1, 1].tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.show()

original_category_counts = pd.Series(df1['category']).value_counts()
z = label_encoder.inverse_transform(y_encoded)
resampled_category_counts = pd.Series(z).value_counts()

# Calling the plotting function to show the category distributions
plot_category_distributions(original_category_counts, resampled_category_counts)


# SMOTE

import pandas as pd
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline as IMBPipeline
import matplotlib.pyplot as plt

def get_measure_value(class_counts, measure_type):
    """
    Calculate the specific measure (mean, median, mode, max) of class counts.

    Parameters:
    - class_counts (pd.Series): The counts of instances in each class.
    - measure_type (str): The type of measure to calculate.

    Returns:
    - int or float: The calculated measure value.
    """
    if measure_type == 'mean':
        return class_counts.mean()
    elif measure_type == 'median':
        return class_counts.median()
    elif measure_type == 'mode':
        return class_counts.mode()[0] if not class_counts.empty else None
    elif measure_type == 'max':
        return class_counts.max()
    else:
        raise ValueError(f"Invalid measure_type: {measure_type}")

# Example DataFrame creation (for demonstration)
# df1 = pd.DataFrame({'category': [your_data_here]})

# Calculate the count of instances in each class
class_counts = df1['category'].value_counts()

# Set the measure type according to your need
measure_type = 'max'  # Choose among 'median', 'mean', 'mode', 'max'

# Get the measure value
set_count = get_measure_value(class_counts, measure_type)

# Define minority and majority classes
minority_classes = class_counts[class_counts < set_count].index.tolist()
majority_classes = class_counts[class_counts >= set_count].index.tolist()

# Create sampling strategy
sampling_strategy = {label: int(set_count) for label in minority_classes}

# Resampling pipeline
resampling_pipeline = IMBPipeline([
    ('smote', SMOTE(sampling_strategy=sampling_strategy, random_state=42)),
    ('under', RandomUnderSampler(sampling_strategy='auto', random_state=42))
])

# Split your dataset into features (X) and target (y)
X = df1.drop('category', axis=1)
y = df1['category']

# Resample
X_resampled, y_resampled = resampling_pipeline.fit_resample(X, y)

# Display distributions before and after resampling
def plot_category_distributions(original_counts, resampled_counts):
    fig, ax = plt.subplots(2, 2, figsize=(14, 10))

    ax[0, 0].pie(original_counts.values, labels=original_counts.index, autopct='%1.1f%%')
    ax[0, 0].set_title('Original Category Distribution')

    ax[0, 1].pie(resampled_counts.values, labels=resampled_counts.index, autopct='%1.1f%%')
    ax[0, 1].set_title('Resampled Category Distribution')

    ax[1, 0].bar(original_counts.index, original_counts.values)
    ax[1, 0].set_title('Original Category Distribution')
    ax[1, 0].tick_params(axis='x', rotation=45)

    ax[1, 1].bar(resampled_counts.index, resampled_counts.values)
    ax[1, 1].set_title('Resampled Category Distribution')
    ax[1, 1].tick_params(axis='x', rotation=45)

    plt.tight_layout()
    plt.show()

# Update your DataFrame with the resampled data
resampled_df = pd.DataFrame(X_resampled, columns=df1.columns.drop('category'))
resampled_df['category'] = y_resampled

# Count occurrences in original and resampled data
original_category_counts = df1['category'].value_counts()
resampled_category_counts = resampled_df['category'].value_counts()

# Call the plotting function
plot_category_distributions(original_category_counts, resampled_category_counts)