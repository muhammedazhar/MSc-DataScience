def plot_category_distributions(original_counts, resampled_counts):
    fig, ax = plt.subplots(2, 2, figsize=(14, 10))

    # Displaying the imbalanced category distribution
    print("\nImbalanced Category Distribution:\n")
    print("-"*55)
    print("Imbalanced Category Distribution:")
    print(original_counts)
    print("-"*55)

    # Displaying the balanced category distribution
    print("\nBalanced Category Distribution:\n")
    print("-"*55)
    print("Balanced Category Distribution:")
    print(resampled_counts)
    print("-"*55)
    
    # Pie chart before resampling
    ax[0, 0].pie(original_counts.values, labels=original_counts.index, autopct='%1.1f%%')
    ax[0, 0].set_title('Original Category Distribution (Pie Chart)')
    
    # Pie chart after resampling
    ax[0, 1].pie(resampled_counts.values, labels=resampled_counts.index, autopct='%1.1f%%')
    ax[0, 1].set_title('Resampled Category Distribution (Pie Chart)')
    
    # Bar chart before resampling
    ax[1, 0].bar(range(len(original_counts)), original_counts.values, tick_label=original_counts.index)
    ax[1, 0].set_title('Original Category Distribution (Bar Chart)')
    ax[1, 0].tick_params(axis='x', rotation=45)
    
    # Bar chart after resampling
    ax[1, 1].bar(range(len(resampled_counts)), resampled_counts.values, tick_label=resampled_counts.index)
    ax[1, 1].set_title('Resampled Category Distribution (Bar Chart)')
    ax[1, 1].tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.show()

original_category_counts = pd.Series(df1['category']).value_counts()
z = label_encoder.inverse_transform(y_encoded)
resampled_category_counts = pd.Series(z).value_counts()

# Calling the plotting function to show the category distributions
plot_category_distributions(original_category_counts, resampled_category_counts)